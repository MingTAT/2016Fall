/**
 * 
 */
package cs311.hw7.graph;
import java.util.List;
import java.util.Objects;
import cs311.hw7.graph.IGraph.DuplicateVertexException;

/**
 * @author Ming
 *
 */
public class graph implements IGraph<V,E>{

	
    /**
     * Set the graph to be a directed graph.  Edge (x, y) is different than edge (y, x)
     */
		public void setDirectedGraph(){
		 
		 
	 }
	 
	 /**
	     * Set the graph to be an undirected graph.  Edge (x, y) is in the graph
	     * if and only if edge (y, x) is in the graph.  Note that when implementing this
	     * and there are already edges defined in the graph, care must be taken to 
	     * resolve conflicts and inconsistencies in the overall implementation.
	     */
	 	public void setUndirectedGraph(){
		  
		  
	  }
	  
	  
	  /**
	     * 
	     * @return true if the graph is directed.
	     */
	    public boolean isDirectedGraph(){
	    	return true;
	    	
	    }
	    
	    
	    /**
	     * Adds a vertex to the graph with name given by the vertexName.  vertexNames,
	     * must be unique in the graph.
	     * 
	     * @param vertexName The unique name of the vertex.
	     * 
	     * @throws cs311.hw6.graph.IGraph.DuplicateVertexException 
	     */
	    public void addVertex( String vertexName ) throws DuplicateVertexException{
	    	
	    	
	    }
	    
	    
	    /**
	     * Adds a vertex to the graph with name given by the vertexName.  vertexNames,
	     * must be unique in the graph.  The vertexData of generic type is associated with
	     * this vertex.
	     * 
	     * @param vertexName
	     * @param vertexData
	     * @throws cs311.hw6.graph.IGraph.DuplicateVertexException 
	     */
	    public void addVertex( String vertexName, V vertexData ) throws DuplicateVertexException{
	    	
	    }
}
